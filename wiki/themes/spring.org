#+TITLE: Spring

/!\ Work in progress /!\

* Spring Framework
:PROPERTIES:
:CREATED:  [2021-04-22 jeu. 22:53]
:END:

** Lifecycle of a bean

Check kata [[file:../katas/ck0034_spring-lifecycle.org][CK0034]].

** Configuring a Spring project

- The "rawest" and oldest form of Spring DI configuration is the "full
  XML" path. Everything is managed using one or more XML files.

  See project [[file:../../code/spring-di-xml-config/][spring-di-xml-config]] from kata [[file:../katas/ck0024_spring-di-xml-config.org][CK0024]] (XML bean
  declaration and injection).

- Starting from Spring 2.5, it became possible to use annotations to
  configure DI. You still had to enable it in an XML file:

  #+begin_src xml
    <context:annotation-config/>
    <context:component-scan base-package="package"/>
  #+end_src

  The XML file takes precedence over annotations in case of a
  conflict.

  See kata [[file:../katas/ck0036_spring-di-xml-annotations.org][CK0036]].

- Starting from Spring 3.0 and "JavaConfig", you can replace the XML
  file with a Java class.

  Of course, from this point on, you can either use the JavaConfig
  style /with or without/ annotation-based injection and bean
  definition.

  See kata [[file:../katas/ck0023_spring-di-java-config.org][CK0023]] (JavaConfig bean declaration and injection - no
  annotation-based injection) and project [TODO] (JavaConfig with
  annotation-based injection).

** Spring JDBC

[[file:../katas/ck0001_spring-jdbc.org][CK0001]].

* Spring Boot

First contact: [[file:../katas/ck0007_spring-boot-minimal.org][CK0007]].
