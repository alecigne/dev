#+TITLE: Java

* Plan
:PROPERTIES:
:CREATED:  [2021-09-03 Fri 20:28]
:END:

This was roughly the program of my 3-month Java training in 2018. My
goal is to build katas spanning this entire plan in order to have my
own reference projects, for my own use and for teaching.

Checked items have been the object of at least one kata - see other
sections below.

- [ ] Java SE basics
- [ ] [[https://github.com/alecigne/gtm-projects/tree/master/bb_ProxiBanqueSI_v1.0][First project]]: layer model with an in-memory DAO and CLI
  presentation layer.
- [X] JDBC
- [ ] Web : HTML/CSS crash course, Servlet, MVC pattern
- [ ] [[https://github.com/alecigne/ProxiBanqueV2][Second project]]: layer model with a JDBC DAO and Servlet-based
  presentation layer.
- [ ] Maven
- [ ] ORM: Hibernate
- [ ] Quick demo of EJBs...
- [ ] JAX-WS & JAX-RS
- [ ] Misc.: locales, logs...
- [ ] Intro to JS
- [ ] [[https://github.com/alecigne/ProxiBanqueSIv3_slm_alc][Third project]]: layer model with a JPA DAO and JAX-RS-based
  presentation (controller) layer
- [-] Spring (see below)
  + [X] Basics of DI (full XML, annotations, JavaConfig...)
  + [ ] Unit tests with Spring
  + [ ] Spring with JPA, Spring Data JPA
  + [ ] Spring Security
- [Angular]
- [ ] [[https://github.com/alecigne/ProxiBanqueSI_v4_cs_slm_alc][Fourth]] (and final) project: Angular frontend, Java/Spring backend
  with REST API, DAO based on Spring Data JPA, AOP, Spring Security.

* JDBC
:PROPERTIES:
:CREATED:  [2021-09-03 Fri 20:22]
:END:

[[file:../katas/ck0019_jdbc.org][CK0019]]: using JDBC to access a database. The choice between MariaDB
and H2 is made using a factory (no Spring DI), maybe done in a weird
way (this is quite old now). However this illustrate how to use JDBC -
see the kata itself.

* Spring
:PROPERTIES:
:CREATED:  [2021-09-03 Fri 20:20]
:END:

** Spring Framework
:PROPERTIES:
:CREATED:  [2021-04-22 jeu. 22:53]
:END:

*** Basics of DI in a Spring project

- The "rawest" and oldest form of Spring DI configuration is the "full
  XML" path. Everything is managed using one or more XML files.

  See project [[file:../../code/spring-di-xml-config/][spring-di-xml-config]] from kata [[file:../katas/ck0024_spring-di-xml-config.org][CK0024]] (XML bean
  declaration and injection).

- Starting from Spring 2.5, it became possible to use annotations to
  configure DI. You still had to enable it in an XML file:

  #+begin_src xml
    <context:annotation-config/>
    <context:component-scan base-package="package"/>
  #+end_src

  The XML file takes precedence over annotations in case of a
  conflict.

  See kata [[file:../katas/ck0036_spring-di-xml-annotations.org][CK0036]].

- Starting from Spring 3.0 and "JavaConfig", you can replace the XML
  file with a Java class.

  Of course, from this point on, you can either use the JavaConfig
  style /with or without/ annotation-based injection and bean
  definition.

  See kata [[file:../katas/ck0023_spring-di-java-config.org][CK0023]] (JavaConfig bean declaration and injection - no
  annotation-based injection) and project [TODO] (JavaConfig with
  annotation-based injection).

*** Lifecycle of a bean

Check kata [[file:../katas/ck0034_spring-lifecycle.org][CK0034]].

*** Spring JDBC

[[file:../katas/ck0001_spring-jdbc.org][CK0001]].

** Spring Boot

First contact: [[file:../katas/ck0007_spring-boot-minimal.org][CK0007]].

