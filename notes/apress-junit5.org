:PROPERTIES:
:ID:       7faa0287-00dc-4626-83b4-59a403f59ef9
:END:
#+title: apress-junit5
#+filetags: :project:

Chapter 1 and 2 from the book [[id:d543b61c-b9ef-4f3e-b05f-62da6b8c03a4][Java Unit Testing with JUnit 5]].

* Chapter 1 and 2

[[file:../../code/apress-junit5-chapter1-2/][Project]] created on [2020-05-31 Sun].

** Chapter 1

- 1976: [[https://dl.acm.org/doi/10.5555/800253.807721][Test procedures: A new approach to software verification]], by
  David J. Panzl (not /Panzal/ as the book says). According to the
  authors, this is the birth of unit testing (UT).

- JUnit was originally based on [[http://sunit.sourceforge.net/][SUnit]] (the Smalltalk UT framework).

- JUnit 5 = JUnit Platform, JUnit Jupiter, JUnit Vintage

** Chapter 2

With JUnit 5:

- Tests classes and test methods are no longer required to be public
  since JUnit uses reflection to find test classes and methods. Thus
  they can be package-private.

- Instead of a public no-arg constructor, a constructor in the test
  class can have parameters and other access modifiers. A
  ~ParameterResolver~ will resolve the parameters and inject them. In
  the =bookstoread= project, to illustrate this, we added a ~TestInfo~
  parameter to a private constructor. The ~TestInfoParameterResolver~
  is provided by JUnit 5.

- We can use ~@DisplayName~ to customize the test class name. I had to
  go in the IntelliJ settings to display the test name in the IntelliJ
  runner: =File > Settings > Build, Execution, Deployment > Build
  Tools > Gradle= and then =Run tests with: IntelliJ IDEA= ([[https://medium.com/@sorravitbunjongpean/fix-junit5-display-name-did-not-show-in-run-tab-intellij-a00c94f39679][source]]).

- Methods can take parameters as well (such as ~TestInfo~). See
  ~shelfEmptyWhenNoBookAdded~.

- JUnit <4 required the method name to start with ~test~ since there
  was no ~@Test~ annotation. This habit stayed with some
  programmers.

  ~@DisplayName~ can be used for methods as well to give them clearer
  names. Again, check ~shelfEmptyWhenNoBookAdded~.

- Fewer assertions in JUnit 5 (delegated to third party librairies
  such as AssertJ). For example, ~assertThat~ is gone from plain
  JUnit 5.

- ~assertAll~ is useful when there are multiple assertions in a single
  test. It will display only the failing assertions and won't display
  the entire test as failed.

- Tests lifecycle and steps of execution.

* Chapter 3

[[file:../../code/apress-junit5-chapter3/][Project]] created on [2020-06-01 Mon].

The TDD loop:

#+begin_example
.-> RED -> GREEN -> REFACTOR -.
|_____________________________|
#+end_example

** First feature

#+begin_quote
As a user, I want to add multiple books to my bookshelf so that I can
read them later.
#+end_quote

- [[orgit-rev:./::87160f][87160f]] :: Implementation of the feature.

- [[orgit-rev:./::202d35][202d35]] :: Refactoring: adding multiple books at once with a
  vararg. I didn't use an iteration here like in the book since
  ~List.addAll~ works. \\
  Remember: test behavior, and not some internal state, otherwise the
  tests might fail after a refactoring.

- [[orgit-rev:./::d9f920][d9f920]] :: More tests for exceptional situations: no books provided
  and check if the datastructure in the ~BookShelf~ is immutable
  (~Collections.unmodifiableList~).

- [[orgit-rev:./::1fd6cb][1fd6cb]] :: Move bookshelf instantiation to ~@BeforeEach~.

** Second feature

#+begin_quote
As a user, I should be able to arrange my bookshelf based on certain
criteria.
#+end_quote

- [[orgit-rev:./::4208b1][4208b1]] :: We want to sort by book name, author name, publication
  date or a combination. To sort by book name, we'll use
  ~Comparator.naturalOrder~ (since we're still using strings). The
  implementation is voluntarily bad here since we're changing the
  underlying list in place!

  #+begin_src java
    public List<String> arrange() {
        books.sort(Comparator.naturalOrder());
        return books;
    }
  #+end_src

- [[orgit-rev:./::b4e9c0][b4e9c0]] :: Fix the bug by returning a new collection and check that
  the underlying shelf is not sorted in place with a test.

- [[orgit-rev:./::680df3][680df3]] :: We need a business class (~Book~) to manage the other
  attributes. Let's refactor everything with a ~Book~ class. I prefer
  to use [[file:bloch-builder.org][Bloch's Builder pattern]]. Also, we enrich our ~@BeforeEach~
  code since we always use the same books.

  The ~Book~ class will implement the ~Comparable~ interface. I kinda
  like the ~this~/~that~ idea:

  #+begin_src java
    @Override
    public int compareTo(Book that) {
        return this.title.compareTo(that.title);
    }
  #+end_src

- [[orgit-rev:./::6d52e1][6d52e1]] :: Change the bookshelf's API so a custom arrangement
  criterion can be passed under the form of a ~Comparator~. I added
  two tests (reverse alphabetical order and chronological order).

- ~@Disabled~ :: In JUnit 5 we can use ~@Disabled~ to... disable a
  test (or an entire test class). I don't use it since I don't see why
  they disable the specific test they are disabling.

- [[orgit-rev:./::161cfc][161cfc]] :: Instead of comparing two lists, assert by comparator with
  AssertJ's ~isSortedAccordingTo~. I like ~BDDAssertions.then~ so I
  use it here.

- [[orgit-rev:./::10dc31][10dc31]] :: We add ~@DisplayName~ to tests. I also renamed the tests
  to my liking. I am not convinced by ~@DisplayName~ so far since this
  a good method name will basically be repeated in the annotation.

** Third feature

#+begin_quote
As a user, I should be able to group books in my bookshelf based on
certain criteria.
#+end_quote

- [[orgit-rev:./::4594ae][4594ae]] :: We implement the grouping of books by publication
  year. Their test is weird since they don't really test if the
  correct books are mapped to the corresponding year; I use
  ~containsEntry~.

- [[orgit-rev:./::0db728][0db728]] :: We add a generic method to the bookshelf to group books
  by a custom criterion. We use this method in the
  ~groupByPublicationYear~ method. Again, I use ~containsEntry~ in the
  test.

- [[orgit-rev:./::717b1b][717b1b]] :: We group test cases by feature using the ~@Nested~
  annotation. I don't follow the books recommendation, I used my own
  grouping:

  [[file:.files/apress-junit-chapter3_1.png]]

  This [[https://www.petrikainulainen.net/programming/testing/junit-5-tutorial-writing-nested-tests/][article]] ([[https://web.archive.org/web/20201115001728/https://www.petrikainulainen.net/programming/testing/junit-5-tutorial-writing-nested-tests/][archive]]) group things by method and then
  conditions. That might be more useful (especially for nested
  ~BeforeEach~ and ~AfterEach~ methods) but it breaks the BDD approach
  of the book, which I quite like (test the behaviour of your unit, no
  its methods).

** Other notes

Here's a somewhat "ideal" (not so much in the "perfect" sense than in
the "theoretical" sense) process I like, based on the
Red-Green-Refactor cycle:

1. *Think* about your implementation and possible bugs. Make a
   mental/physical note of these possible bugs.

2. Make it work:
   - Add a basic test.
   - Make it compile.
   - Make it red.
   - Make it green.
   - Repeat until the basic cases of the feature are covered.

3. Make it correct:
   - Cover the possible bugs you thought about earlier with
     tests. They might be red if you were not careful during
     implementation; make them green.
   - Now that you can look at your implementation, take a step back
     and *think again*: for every angle of attack you see in your
     code, add a test. It might be red; make it green.

4. Make it readable: now that we have very good tests, we can be quite
   confident about our refactoring.

5. Make it fast: early optimizations only - leave the
   micro-optimizations for later. Again, the tests will bring us
   serenity. Maybe we should write performance tests before doing
   this - see [[https://github.com/quick-perf/quickperf][Quickperf]].

* Chapter 4

[[file:../../code/apress-junit5-chapter4/][Project]] created on [2020-06-04 Thu].

** Dependency Injection

- [[orgit-rev:./::61208d][61208d]] :: dependency injection (DI) is also important for test data:
  by injecting it, we can reuse the data and change what is injected
  in the tests. It also improves readability.

  With JUnit 5 we can inject in constructors or test methods. In this
  commit we clean our test class by using DI: we inject test data by
  implementing JUnit 5's ~ParameterResolver~ interface.

  The test class needs to be annotated (~ExtendWith~) to make it aware
  of the custom resolver. The resolver validates if the implementation
  can provide the resolution for the asked parameter
  (~supportsParameter~ method) and returns the value for the asked
  parameter (~resolveParameter~ method).

** Feature: Track Bookshelf Progress

#+begin_quote
As a user, I want to track the progress of my bookshelf based on the
books I have read.
#+end_quote

3 metrics at the bookshelf level expressed as a percentage of all
books:

- To-Do (the user has not started reading these books)
- In Progress (the user has started reading these books)
- Completed (the user has finished reading these books)

Let's start.

- [[orgit-rev:./::47abea][47abea]] :: In this commit we add a new test spec for this feature,
  ~BookShelfProgressSpec~, and a basic test case to check that when no
  book has been started, progress should be at 0%.

- [[orgit-rev:./::8df00b][8df00b]] :: Other test cases, with a few books finished and a few
  books in progress. I used ~Math.toIntExact~ this time in the
  ~progress~ method.

- [[orgit-rev:./::519914][519914]] :: Use ~ExtensionContext.Store~ to inject the same map in the
  ~setUp~ method and the test methods. I struggled to understand since
  this section is terse.

  Before each test, the books are injected in the ~setUp~ method. To
  have access to the same objects in the tests (for example, to alter
  them), we use the instance variables of the test class. The book
  proposes to do it without instance variables, by injecting the same
  books in the ~setUp~ and the test methods. There are two incorrect
  ways of doing it:

  + Just add the books as a parameter to the tests:

    #+begin_src java
      @BeforeEach
      void setUp(Map<String, Book> books) {
          shelf = new BookShelf();
          effectiveJava = books.get("Effective Java");
          codeComplete = books.get("Code Complete");
          mythicalManMonth = books.get("The Mythical Man-Month");
          cleanCode = books.get("Clean Code");
          refactoring = books.get("Refactoring: Improving the Design of Existing Code");
          shelf.add(effectiveJava, codeComplete, mythicalManMonth, cleanCode, refactoring);
      }

      @Test
      @DisplayName("when a few books have been completed should be correct")
      void bookshelfProgress_whenAFewBooksCompleted_shouldBeCorrect(Map<String, Book> books) {
          books.get("Effective Java").startedReadingOn(LocalDate.of(2016, JULY, 1));
          books.get("Effective Java").finishedReadingOn(LocalDate.of(2016, JULY, 31));
          books.get("Clean Code").startedReadingOn(LocalDate.of(2016, AUGUST, 1));
          books.get("Clean Code").finishedReadingOn(LocalDate.of(2016, AUGUST, 31));
          Progress progress = shelf.progress();
          then(progress.toRead()).as("60% of books should have the To-Do progress state")
                  .isEqualTo(60);
          then(progress.inProgress()).as("No book should be started")
                  .isZero();
          then(progress.completed()).as("40% of books should be completed")
                  .isEqualTo(40);
      }
    #+end_src

    This will not work since ~resolveParameter~ will be called twice
    (during the ~setUp~ injection and the test method injection) and
    instantiate two different maps of books. The books altered in the
    test won't be the books that are in the shelf.

  + Instantiate the map in the constructor and store the reference in
    an instance variable in ~BooksParameterResolver~. This way,
    ~resolveParameter~ would return that reference every time and we
    would inject the same books.

    However, *the tests will fail* since we have created a global
    state. The authors call this mistake the "chain-gang antipattern"
    (the tests now have to be executed in some particular order to
    work, since a global state is changed). There is a reference to
    this name [[https://www.digitaltapestry.net/testify/manual/AntiPatterns.html][here]] ([[https://web.archive.org/web/20210227151930/https://www.digitaltapestry.net/testify/manual/AntiPatterns.html][archive]]).

  The authors propose the use of ~ExtensionContext.Store~ as a viable
  alternative:

  #+begin_src java
    @Override
    public Object resolveParameter(ParameterContext parameterContext, ExtensionContext extensionContext) {
        ExtensionContext.Store store = extensionContext.getStore(ExtensionContext.Namespace.create(Book.class));
        return store.getOrComputeIfAbsent("books", k -> getBooks());
    }
  #+end_src

  The store is created during the first call to ~resolveParameter~
  (~setUp~) and the second call (test method) will reuse the same
  map. So by alterning the books in the test, we'll be altering the
  shelf itself.

** Feature: Search BookShelf

#+begin_quote
As a user, I want to search my bookshelf.
#+end_quote

- [[orgit-rev:./::f834f2][f834f2]] :: Let's start by a basic search feature. I opted for an
  external test class. The book uses a nested class. Here we implement
  the search by title and the search by title and "hint" (filter).

- [[orgit-rev:./::abeedd][abeedd]] :: The goal here is to fix the "primitive obsession" in the
  ~findBooksByTitle~ method. The API is too low-level and we should
  make things more abstract.

  A few notes first. Their ~BookPublishedYearFilter~ is weird. The
  ~apply~ method should be a ~test~ method because this is a predicate
  (actually their ~BookFilter~ should simply extends
  ~Predicate<Book>~). There should be a private constructor, otherwise
  you can instantiate a filter and test things with an empty
  comparison. ~Before~ and ~After~ shouldn't be cased this way. This
  is Java, not C#. Also, since we're testing the year, no need to
  instantiate a dummy ~LocalDate~...

  This commit creates a ~BookPublicationYearFilter~ as a predicate and
  adds some tests for it. I tried to follow the same architecture with
  my preferences.

- [[orgit-rev:./::1a5f35][1a5f35]] :: The authors add a ~CompositeFilter~ class. This is useless
  with my filters implementing the ~Predicate~ interface: I could just
  use ~and~. However I'll go with the flow here to not deviate from
  the book too much. I don't go through the steps using a map and a
  "fake" class to keep trace of the invocation. My implementation
  doesn't execute every filter since I use ~allMatch~, which is
  better.

- [[orgit-rev:./::c6e87f][c6e87f]] :: "Testing traits" - testing common behaviour such as
  passing a ~null~ book to a filter. Here we're just going to create
  an interface with a default test. The implementation will be
  provided by an abstract method, to be implemented by the class under
  test. In my case, I used different filters in the same class
  (~before~ and ~after~). To illustrate the point of the book I'll
  just follow the example with the ~after~ filter.

- [[orgit-rev:./::0af0fe][0af0fe]] :: Grouping tests by tags. Examples in the book: slow/fast
  tests, environment-specific tests, nightly tests. Tags are
  ~java.lang.annotation.Repeatable~ annotations so we can add them
  multiple times to a test method/class.

  In IntelliJ we can add a configuration that will use /tag
  expressions/. However I couldn't use the [[https://junit.org/junit5/docs/current/user-guide/#running-tests-tag-expressions][JUnit boolean operators]]
  ([[https://web.archive.org/web/20210216085811/https://junit.org/junit5/docs/current/user-guide/#running-tests-tag-expressions][archive]]), only a single tag name.
