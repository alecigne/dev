#+TITLE: =spring-jdbc=

[[file:../../code/spring-jdbc/][Project]] created on [2018-09-05 Wed].

The most interesting classes are:

- ~JdbcTemplate~
- ~NamedParameterJdbcTemplate~
- ~SimpleJdbcInsert~
- ~SimpleJdbcCall~

Let's start with the obvious stuff: executing SQL 1. without
parameters and 2. that doesn't return any "qualitative" result. This
is mostly ~JdbcTemplate#execute~ and ~JdbcTemplate#update~ territory.

- ~execute~ just executes SQL. It is mainly used for DDL statements,
  but it would also work for DML such as an insertion. However, it
  doesn't return any result. I use it here to truncate the =Person=
  table - see ~PersonDao#truncateTable~.

- ~update~ issues a single SQL update. It returns the number of rows
  affected by the SQL statement. See ~createMyself~.

For SQL that will return something, we have multiple solutions that we
will illustrate with either ~JdbcTemplate#queryForObject~ (for a
single object) and ~JdbcTemplate#query~ (for multiple objects).

- Providing the type itself: see ~countAllPersons~.

- Using an implementation of ~RowMapper~ (full class or through a
  lambda): see ~findAll~ and ~findAllLambda~.

- Using ~BeanPropertyRowMapper~: see ~findAllBeanPropertyRowMapper~.

For providing parameters, we also have multiple solutions:

- Creating an array of parameters (or use the varargs in the
  signature): see ~createSomeone~ and ~findById~.

- Using ~NamedParameterJdbcTemplate~ with the ~MapSqlParameterSource~
  class: see ~createSomeoneWithNamedParameters~. In that case you're
  the one doing the correspondance between the property and the value.

- Using ~NamedParameterJdbcTemplate~ with the
  ~BeanPropertySqlParameterSource~ class: see
  ~createSomeoneWithNamedParametersAndBeanProperties~. The matching
  between property and value is done automatically from a Java
  bean. From the docs:

  #+begin_quote
  The names of the bean properties have to match the parameter names.
  #+end_quote

  See ~createSomeoneWithNamedParametersAndBeanPropertiesIncorrect~.
